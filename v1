import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from datetime import datetime

# =============================================================================
# Page Configuration
# =============================================================================
st.set_page_config(
    page_title="溫室氣體盤查儀表板",
    page_icon="🌍",
    layout="wide"
)

# =============================================================================
# User Authentication
# =============================================================================
# In a real app, use a database and hashed passwords!
USERS = {
    "Elvis": "0000",
    "Nutc1": "0001",
    "Nutc2": "0002",
    "Nutc3": "0003"
}


def login_page():
    """Renders the login page."""
    st.title("溫室氣體盤查系統登入")
    st.write("請使用您的帳號密碼登入")

    with st.form("login_form"):
        username = st.text_input("帳號 (Username)")
        password = st.text_input("密碼 (Password)", type="password")
        submitted = st.form_submit_button("登入")

        if submitted:
            if username in USERS and USERS[username] == password:
                st.session_state.logged_in = True
                st.session_state.username = username
                st.success("登入成功！")
                st.rerun()
            else:
                st.error("帳號或密碼錯誤")


# =============================================================================
# Helper Functions & Data Initialization
# =============================================================================
def initialize_state():
    """
    Initializes session state with default values.
    This function is now more robust, checking for each key individually.
    """
    # --- State flags ---
    if "show_dashboard" not in st.session_state:
        st.session_state.show_dashboard = False

    # --- Inventory Year ---
    if "inventory_year" not in st.session_state:
        years = range(datetime.now().year + 25, 2019, -1)
        st.session_state.inventory_year = datetime.now().year if datetime.now().year in years else years[0]

    # --- Data Dictionaries ---
    if "s1_data" not in st.session_state:
        st.session_state.s1_data = {
            '燃料油': {'usage': 100, 'unit': '公升/年', 'factor': 0.002567},
            '天然氣(NG)': {'usage': 100, 'unit': '度/年', 'factor': 0.001881},
            '液化石油氣(LPG)': {'usage': 100, 'unit': '公升/年', 'factor': 0.001754},
            '汽油': {'usage': 100, 'unit': '公升/年', 'factor': 0.002271},
            '柴油': {'usage': 100, 'unit': '公升/年', 'factor': 0.002615},
            '潤滑油': {'usage': 100, 'unit': '公升/年', 'factor': 0.002956},
        }
    if "s2_data" not in st.session_state:
        st.session_state.s2_data = {
            '車用汽油': {'usage': 100, 'unit': '公升/年', 'factor': 0.002298},
            '車用柴油': {'usage': 100, 'unit': '公升/年', 'factor': 0.002722},
            '煤油': {'usage': 100, 'unit': '公升/年', 'factor': 0.002567},
            '潤滑油_mobile': {'name': '潤滑油', 'usage': 100, 'unit': '公升/年', 'factor': 0.002956},
            '液化石油氣(LPG)_mobile': {'name': '液化石油氣(LPG)', 'usage': 100, 'unit': '公升/年', 'factor': 0.001803},
            '液化天然氣(LNG)': {'usage': 100, 'unit': '度/年', 'factor': 0.002241},
        }
    if "s3_septic_system" not in st.session_state:
        st.session_state.s3_septic_system = '否 (使用化糞池)'
    if "s3_data" not in st.session_state:
        st.session_state.s3_data = {
            '平日日間使用學生': {'usage': 100, 'factor': 0.0021},
            '平日夜間使用學生': {'usage': 10, 'factor': 0.0005},
            '假日使用學生': {'usage': 0, 'factor': 0.0},
            '住宿人員': {'usage': 0, 'factor': 0.0},
            '平日日間使用員工': {'usage': 50, 'factor': 0.0021},
            '平日夜間使用員工': {'usage': 5, 'factor': 0.0005},
            '假日使用員工': {'usage': 0, 'factor': 0.0},
        }
    if "s4_data" not in st.session_state:
        st.session_state.s4_data = {
            '二氧化碳滅火器': {'usage': 1, 'gwp': 1, 'factor': None},
            'FM-200': {'usage': 1, 'gwp': 3350, 'factor': None},
            'BC型乾粉滅火器': {'usage': 1, 'gwp': None, 'factor': 0.0003},
            'KBC型乾粉滅火器': {'usage': 1, 'gwp': None, 'factor': 0.0002},
        }
    if "s5_data" not in st.session_state:
        st.session_state.s5_data = {
            'HFC-23/R-23': {'usage': 0.5, 'gwp': 12400}, 'HFC-32/R-32': {'usage': 0.1, 'gwp': 677},
            'HFC-41': {'usage': 0.0, 'gwp': 116}, 'HFC-134': {'usage': 0.0, 'gwp': 1120},
            'HFC-134a/R-134a': {'usage': 0.0, 'gwp': 1300}, 'HFC-143': {'usage': 0.0, 'gwp': 328},
            'HFC-143a/R-143a': {'usage': 0.0, 'gwp': 4800}, 'HFC-152': {'usage': 0.0, 'gwp': 16},
            'HFC-152a/R-152a': {'usage': 0.0, 'gwp': 138}, 'R401a': {'usage': 0.0, 'gwp': 1130},
            'R401B': {'usage': 0.0, 'gwp': 1236}, 'R404A': {'usage': 0.5, 'gwp': 3943},
            'R407A': {'usage': 0.0, 'gwp': 1923}, 'R407B': {'usage': 0.0, 'gwp': 2547},
            'R407C': {'usage': 0.0, 'gwp': 1624}, 'R408A': {'usage': 0.0, 'gwp': 3257},
            'R410A': {'usage': 0.0, 'gwp': 1924}, 'R413A': {'usage': 0.0, 'gwp': 1945},
            'R417A': {'usage': 0.0, 'gwp': 2127}, 'R507A': {'usage': 0.0, 'gwp': 3985}
        }
    if "s6_data" not in st.session_state:
        st.session_state.s6_data = {
            '汽車-汽油': {'distance': 100, 'factor': 0.104}, '汽車-電動車': {'distance': 100, 'factor': 0.04},
            '機車-一般機車': {'distance': 100, 'factor': 0.079}, '機車-電動機車': {'distance': 100, 'factor': 0.017},
            '公車/客運': {'distance': 100, 'factor': 0.078}, '捷運': {'distance': 100, 'factor': 0.04},
            '火車': {'distance': 0, 'factor': 0.04}, '高鐵': {'distance': 0, 'factor': 0.028}
        }
    if "s7_electricity" not in st.session_state:
        months = ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"]
        st.session_state.s7_electricity = {m: 10000 for m in months}
    if "s7_water" not in st.session_state:
        months = ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"]
        st.session_state.s7_water = {m: 100 for m in months}
    if "s7_water_source" not in st.session_state:
        st.session_state.s7_water_source = '台灣自來水營業事業處'
    if "water_factors" not in st.session_state:
        st.session_state.water_factors = {'台灣自來水營業事業處': 0.1872, '臺北自來水營業事業處': 0.0666}


# =============================================================================
# Calculation Functions
# =============================================================================
def calculate_totals():
    """Calculate all emission totals and store them in session_state."""
    totals = {}
    gwp_ch4 = 28

    # Step 1
    totals['s1'] = sum(v['usage'] * v['factor'] for k, v in st.session_state.s1_data.items())

    # Step 2
    totals['s2'] = sum(v.get('usage', 0) * v.get('factor', 0) for k, v in st.session_state.s2_data.items())

    # Step 3
    is_septic_used = st.session_state.s3_septic_system == '否 (使用化糞池)'
    totals['s3'] = sum(
        v['usage'] * v['factor'] * gwp_ch4 for k, v in st.session_state.s3_data.items()) if is_septic_used else 0

    # Step 4
    s4_total = 0
    for k, v in st.session_state.s4_data.items():
        if v['gwp']:
            s4_total += (v['usage'] * v['gwp']) / 1000
        elif v['factor']:
            s4_total += v['usage'] * v['factor']
    totals['s4'] = s4_total

    # Step 5
    totals['s5'] = sum((v['usage'] * v['gwp']) / 1000 for k, v in st.session_state.s5_data.items())

    # Step 6
    totals['s6'] = sum((v['distance'] * v['factor']) / 1000 for k, v in st.session_state.s6_data.items())

    # Step 7
    total_electricity_usage = sum(st.session_state.s7_electricity.values())
    totals['s7_electricity'] = (total_electricity_usage * 0.474) / 1000

    total_water_usage = sum(st.session_state.s7_water.values())
    water_factor = st.session_state.water_factors[st.session_state.s7_water_source]
    totals['s7_water'] = (total_water_usage * water_factor) / 1000

    st.session_state.totals = totals

    # Scope Totals
    scope1 = totals['s1'] + totals['s2'] + totals['s3'] + totals['s4'] + totals['s5']
    scope2 = totals['s7_electricity']
    scope3 = totals['s6'] + totals['s7_water']
    st.session_state.scope_totals = {
        'Scope 1': scope1,
        'Scope 2': scope2,
        'Scope 3': scope3,
        'Grand Total': scope1 + scope2 + scope3
    }

    st.session_state.emission_breakdown = {
        '固定源': totals.get('s1', 0),
        '移動源': totals.get('s2', 0),
        '汙水': totals.get('s3', 0),
        '滅火器': totals.get('s4', 0),
        '冷媒': totals.get('s5', 0),
        '員工通勤': totals.get('s6', 0),
        '外購電力': totals.get('s7_electricity', 0),
        '外購水力': totals.get('s7_water', 0),
    }


# =============================================================================
# UI Components
# =============================================================================
def main_app():
    """Renders the main application after login."""
    with st.sidebar:
        st.write(f"歡迎, {st.session_state.username}!")
        if st.button("登出"):
            for key in list(st.session_state.keys()):
                del st.session_state[key]
            st.rerun()

    if st.session_state.get("show_dashboard", False):
        create_dashboard()
    else:
        create_input_form()


def create_dashboard():
    """Renders the main dashboard view."""
    st.title(f"{st.session_state.inventory_year} 年度溫室氣體盤查儀表板")
    if st.button("⬅️ 返回編輯資料"):
        st.session_state.show_dashboard = False
        st.rerun()

    scope = st.session_state.scope_totals

    # KPI Cards
    col1, col2, col3, col4 = st.columns(4)
    col1.metric("總碳排放量 (tCO2e)", f"{scope['Grand Total']:.2f}")
    col2.metric("範疇一 Scope 1", f"{scope['Scope 1']:.2f}")
    col3.metric("範疇二 Scope 2", f"{scope['Scope 2']:.2f}")
    col4.metric("範疇三 Scope 3", f"{scope['Scope 3']:.2f}")

    st.divider()

    # Charts
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("各類別排放佔比")
        emissions = st.session_state.emission_breakdown
        # Filter out zero-value emissions for a cleaner chart
        filtered_emissions = {k: v for k, v in emissions.items() if v > 0}

        fig = go.Figure(data=[go.Pie(
            labels=list(filtered_emissions.keys()),
            values=list(filtered_emissions.values()),
            hole=.4,
            textinfo='label+percent',
            insidetextorientation='radial'
        )])
        fig.update_layout(showlegend=False, height=400, margin=dict(l=20, r=20, t=20, b=20))
        st.plotly_chart(fig, use_container_width=True)

    with col2:
        st.subheader("各範疇排放比較 (tCO2e)")
        scope_df = pd.DataFrame({
            '範疇': ['Scope 1', 'Scope 2', 'Scope 3'],
            '排放量': [scope['Scope 1'], scope['Scope 2'], scope['Scope 3']]
        })
        fig = go.Figure(go.Bar(
            x=scope_df['排放量'],
            y=scope_df['範疇'],
            orientation='h',
            text=scope_df['排放量'].apply(lambda x: f'{x:.2f}'),
            textposition='auto',
            marker_color=['#10B981', '#F59E0B', '#8B5CF6']
        ))
        fig.update_layout(height=400, margin=dict(l=20, r=20, t=20, b=20))
        st.plotly_chart(fig, use_container_width=True)


def create_input_form():
    """Renders the multi-tab data input form."""
    st.title("溫室氣體盤查資料輸入")

    # Year Selector
    years = range(datetime.now().year + 25, 2019, -1)
    st.selectbox("盤查年度:", years, key='inventory_year')
    st.info("請填寫以下各類別的活動數據，系統將自動計算排放量。")
    st.divider()

    # --- TABS FOR NAVIGATION ---
    tab1, tab2, tab3, tab4, tab5, tab6, tab7 = st.tabs([
        "1. 固定源", "2. 移動源", "3. 汙水", "4. 滅火器",
        "5. 冷媒", "6. 員工通勤", "7. 電力/水力"
    ])

    # --- Tab 1: Stationary Sources ---
    with tab1:
        cols = st.columns([2, 2, 1])
        cols[0].markdown("**燃料類別**")
        cols[1].markdown("**使用量**")
        cols[2].markdown("**排放量計算 (tCO2e)**")

        data = st.session_state.s1_data
        total = 0
        for item, values in data.items():
            cols = st.columns([2, 2, 1])
            cols[0].write(f"{item} ({values['unit']})")
            values['usage'] = cols[1].number_input(" ", key=f"s1_{item}", value=values['usage'],
                                                   label_visibility="collapsed")
            emission = values['usage'] * values['factor']
            cols[2].text_input(" ", f"{emission:.4f}", key=f"s1_{item}_out", disabled=True,
                               label_visibility="collapsed")
            total += emission
        st.metric("固定源碳排放當量 (tCO2e)", f"{total:.4f}")

    # --- Tab 2: Mobile Sources ---
    with tab2:
        cols = st.columns([2, 2, 1])
        cols[0].markdown("**燃料類別**")
        cols[1].markdown("**使用量**")
        cols[2].markdown("**排放量計算 (tCO2e)**")

        data = st.session_state.s2_data
        total = 0
        for item, values in data.items():
            cols = st.columns([2, 2, 1])
            name = values.get('name', item)
            cols[0].write(f"{name} ({values['unit']})")
            values['usage'] = cols[1].number_input(" ", key=f"s2_{item}", value=values['usage'],
                                                   label_visibility="collapsed")
            emission = values['usage'] * values['factor']
            cols[2].text_input(" ", f"{emission:.4f}", key=f"s2_{item}_out", disabled=True,
                               label_visibility="collapsed")
            total += emission
        st.metric("移動源碳排放當量 (tCO2e)", f"{total:.4f}")

    # --- Tab 3: Wastewater ---
    with tab3:
        st.selectbox("學校汙水是否有納入汙水下水道系統？", ['否 (使用化糞池)', '是 (無化糞池逸散)'],
                     key='s3_septic_system')
        total = 0
        if st.session_state.s3_septic_system == '否 (使用化糞池)':
            cols = st.columns([2, 2, 1])
            cols[0].markdown("**人員類別**")
            cols[1].markdown("**人數**")
            cols[2].markdown("**排放量計算 (tCO2e)**")

            data = st.session_state.s3_data
            for item, values in data.items():
                cols = st.columns([2, 2, 1])
                cols[0].write(f"{item}")
                values['usage'] = cols[1].number_input(" ", key=f"s3_{item}", value=values['usage'],
                                                       label_visibility="collapsed")
                emission = values['usage'] * values['factor'] * 28  # GWP for CH4
                cols[2].text_input(" ", f"{emission:.4f}", key=f"s3_{item}_out", disabled=True,
                                   label_visibility="collapsed")
                total += emission
        st.metric("汙水排放碳排放當量 (tCO2e)", f"{total:.4f}")

    # --- Tab 4: Fire Extinguishers ---
    with tab4:
        cols = st.columns([2, 2, 1])
        cols[0].markdown("**類別**")
        cols[1].markdown("**每年填充/使用量 (公斤/年)**")
        cols[2].markdown("**排放量計算 (tCO2e)**")

        data = st.session_state.s4_data
        total = 0
        for item, values in data.items():
            cols = st.columns([2, 2, 1])
            cols[0].write(f"{item}")
            values['usage'] = cols[1].number_input(" ", key=f"s4_{item}", value=values['usage'],
                                                   label_visibility="collapsed")
            if values['gwp']:
                emission = (values['usage'] * values['gwp']) / 1000
            else:
                emission = values['usage'] * values['factor']
            cols[2].text_input(" ", f"{emission:.4f}", key=f"s4_{item}_out", disabled=True,
                               label_visibility="collapsed")
            total += emission
        st.metric("滅火器使用碳排放當量 (tCO2e)", f"{total:.4f}")

    # --- Tab 5: Refrigerants ---
    with tab5:
        cols = st.columns([2, 2, 1, 1])
        cols[0].markdown("**冷媒種類**")
        cols[1].markdown("**每年填充量 (公斤/年)**")
        cols[2].markdown("**GWP係數**")
        cols[3].markdown("**排放量 (tCO2e)**")

        data = st.session_state.s5_data
        total = 0
        for item, values in data.items():
            cols = st.columns([2, 2, 1, 1])
            cols[0].write(f"{item}")
            values['usage'] = cols[1].number_input(" ", key=f"s5_{item}", value=values['usage'], step=0.1,
                                                   format="%.1f", label_visibility="collapsed")
            cols[2].text_input(" ", value=values['gwp'], key=f"s5_gwp_{item}", disabled=True,
                               label_visibility="collapsed")
            emission = (values['usage'] * values['gwp']) / 1000
            cols[3].text_input(" ", f"{emission:.4f}", key=f"s5_{item}_out", disabled=True,
                               label_visibility="collapsed")
            total += emission
        st.metric("填充冷媒碳排放當量 (tCO2e)", f"{total:.4f}")

    # --- Tab 6: Commuting ---
    with tab6:
        cols = st.columns([2, 2, 1, 1])
        cols[0].markdown("**交通工具**")
        cols[1].markdown("**總通勤距離 (公里/年)**")
        cols[2].markdown("**排放係數 (KgCO2e/pkm)**")
        cols[3].markdown("**排放量 (tCO2e)**")

        data = st.session_state.s6_data
        total = 0
        for item, values in data.items():
            cols = st.columns([2, 2, 1, 1])
            cols[0].write(f"{item}")
            values['distance'] = cols[1].number_input(" ", key=f"s6_{item}", value=values['distance'],
                                                      label_visibility="collapsed")
            cols[2].text_input(" ", value=values['factor'], key=f"s6_factor_{item}", disabled=True,
                               label_visibility="collapsed")
            emission = (values['distance'] * values['factor']) / 1000
            cols[3].text_input(" ", f"{emission:.4f}", key=f"s6_{item}_out", disabled=True,
                               label_visibility="collapsed")
            total += emission
        st.metric("員工通勤碳排放當量 (tCO2e)", f"{total:.4f}")

    # --- Tab 7: Utilities ---
    with tab7:
        st.subheader("7a. 外購電力 (度)")
        data = st.session_state.s7_electricity
        cols = st.columns(4)
        for i, month in enumerate(data.keys()):
            data[month] = cols[i % 4].number_input(month, key=f"s7_elec_{month}", value=data[month])
        total_usage = sum(data.values())
        total_emission = (total_usage * 0.474) / 1000
        st.metric("總用電度數", f"{total_usage:,}")
        st.metric("外購電力碳排放當量 (tCO2e)", f"{total_emission:.4f}")
        st.divider()
        st.subheader("7b. 外購水力 (度)")
        st.selectbox("請選擇供水單位", options=list(st.session_state.water_factors.keys()), key='s7_water_source')
        data = st.session_state.s7_water
        cols = st.columns(4)
        for i, month in enumerate(data.keys()):
            data[month] = cols[i % 4].number_input(month, key=f"s7_water_{month}", value=data[month])
        total_usage = sum(data.values())
        water_factor = st.session_state.water_factors[st.session_state.s7_water_source]
        total_emission = (total_usage * water_factor) / 1000
        st.metric("總用水度數", f"{total_usage:,}")
        st.metric("外購水力碳排放當量 (tCO2e)", f"{total_emission:.4f}")

    st.divider()
    if st.button("✅ 計算並查看儀表板", use_container_width=True, type="primary"):
        calculate_totals()
        st.session_state.show_dashboard = True
        st.rerun()


# =============================================================================
# Main App Logic
# =============================================================================
if "logged_in" not in st.session_state:
    st.session_state.logged_in = False

if st.session_state.logged_in:
    initialize_state()
    main_app()
else:
    login_page()
